% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_timeline.R
\name{plot_timelineA}
\alias{plot_timelineA}
\alias{plot_timelineB}
\alias{plot_timelineC}
\title{Creates a time line plot}
\usage{
plot_timelineA(data, specs = timeline_specs(data))

plot_timelineB(data)

plot_timelineC(data, recode = TRUE)
}
\arguments{
\item{data}{Pre-processed data for the chart, with columns: year, value,
line_name.}

\item{specs}{Dataframe containing order of lines, their labels and colour
names from the r2dii_colours palette.}

\item{recode}{One of the following:
\itemize{
\item A function to apply to \code{data$line_name}.
\item A named vector to recode \code{data$line_name}.
\item A logical vector. \code{TRUE} recodes \code{data$line_name} to title case. \code{FALSE}
does no recoding and plots \code{data$line_name} as is.
}}
}
\value{
An object of class "ggplot".
}
\description{
We are exploring different interfaces before release. We are keen to hear
feedback from beta-testers like you. Please try these alternative interfaces
and let us know which one you prefer. The main difference between them is if
and how they allow recoding the values of \code{line_name}, which become the
labels of the plot legend:
\itemize{
\item \code{plot_timelineA()} defaults to recoding \code{line_name} to title case, and
allows custom recoding via a data frame passed to the argument \code{specs}.
}

\itemize{
\item \code{plot_timelineB()} plots \code{line_name} "as is". You may recode \code{line_name}
before passing the \code{data} with, for example, \code{\link[dplyr:recode]{dplyr::recode()}}.
}

\itemize{
\item \code{plot_timelineC()} defaults to plotting a title case version of \code{line_name}
values, and allows none or other recoding via the argument \code{recode} (see
Arguments).
}
}
\examples{
library(ggplot2)
library(dplyr)

# Which version of `plot_timeline*()` do you prefer?

# `plot_timelineA()` -------------------------------------------------------

data <- prepare_for_timeline(sda_target)
plot_timelineA(data)

# Customize `line_name` via a data frame passed to `specs`
# styler: off
custom <- tribble(
           ~line_name,           ~label, ~colour_hex,
          "projected",          "Proj.",   "#1b324f",
  "corporate_economy",  "Corp. Economy",   "#00c082",
)
# styler: on

# Customize as usual with ggplot2
plot_timelineA(data, specs = custom) +
  labs(title = "Emission intensity trend for Cement")

# `plot_timelineB()` ------------------------------------------------------

data <- prepare_for_timeline(sda_target)
plot_timelineB(data)

data \%>\%
  mutate(line_name = recode(line_name,
    "projected" = "Proj.",
    "corporate_economy" = "Corp. economy"
  )) \%>\%
  plot_timelineB()

# `plot_timelineC()` ------------------------------------------------------

data <- prepare_for_timeline(sda_target)
unique(data$line_name)
# Recode to title case
plot_timelineC(data, recode = TRUE)

# Don't recode
plot_timelineC(data, recode = FALSE)

# Recode using a function
plot_timelineC(data, recode = toupper)

# Recode via a named vector
legend <- c("projected" = "Projected", "corporate_economy" = "Corp. Economy")
plot_timelineC(data, recode = legend)
}
\seealso{
timeline_specs

\code{\link[dplyr:recode]{dplyr::recode()}}.
}
