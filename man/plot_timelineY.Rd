% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_timelineY.R
\name{plot_timelineY}
\alias{plot_timelineY}
\title{Creates a time line plot}
\usage{
plot_timelineY(data, specs = timeline_specs(data))
}
\arguments{
\item{data}{Data frame like the output of \code{\link[=prep_timelineY]{prep_timelineY()}}.}

\item{specs}{Data frame containing order of lines, their labels and colour
names from the r2dii_colours palette.}
}
\value{
An object of class "ggplot".
}
\description{
We are exploring different interfaces before release. We are keen to hear
feedback from beta-testers like you. Please try these alternative interfaces
and let us know which one you prefer. The main difference between them is if
and how they allow recoding the values of \code{line_name}, which become the
labels of the plot legend:
\itemize{
\item \code{plot_timelineY()} defaults to recoding \code{line_name} to title case, and
allows custom recoding via a data frame passed to the argument \code{specs}.
}
}
\examples{
library(ggplot2, warn.conflicts = FALSE)
library(dplyr, warn.conflicts = FALSE)

data <- prep_timelineY(sda, sector_filter = "cement")
plot_timelineY(data)

# Customize as usual with ggplot2
plot_timelineY(data) +
  scale_colour_manual(values = c("red", "blue", "green", "black")) +
  labs(title = "Timeline plot")

# Customize `line_name` via a data frame passed to `specs`
# styler: off
custom <- tribble(
                ~line_name,                  ~label,        ~hex,
               "projected",                 "Proj.",   "#4a5e54",
       "corporate_economy",         "Corp. Economy",   "#a63d57",
             "target_demo",         "Target (demo)",   "#78c4d6",
  "adjusted_scenario_demo",  "Adj. Scenario (demo)",   "#f2e06e",
)
# styler: on

plot_timelineY(data, specs = custom)
}
\seealso{
\link{sda}, \link{timeline_specs}.
}
