% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_trajectory.R
\name{plot_trajectoryA}
\alias{plot_trajectoryA}
\alias{plot_trajectory}
\alias{plot_trajectoryB}
\title{Create a trajectory alignment chart in a ggplot object}
\usage{
plot_trajectoryA(
  data,
  scenario_specs_good_to_bad,
  main_line_metric,
  additional_line_metrics = NULL
)

plot_trajectory(
  data,
  scenario_specs_good_to_bad,
  main_line_metric,
  additional_line_metrics = NULL
)

plot_trajectoryB(data, main_line = NULL)
}
\arguments{
\item{data}{Filtered input data; with columns: year, metric_type, metric and
value.}

\item{scenario_specs_good_to_bad}{Data frame containing scenario
specifications like name label, ordered from the most to least sustainable;
with columns: scenario, label.}

\item{main_line_metric}{Data frame containing information about metric that
should be plotted as the main line; with columns: metric, label.}

\item{additional_line_metrics}{Data frame containing information about
additional metrics that should be plotted as lines; with columns: metric,
label).}

\item{main_line}{String of length 1. The \code{metric} to plot as the line with
the most visual salience (solid black line). \code{NULL} defaults to
"projected".}
}
\description{
We are exploring different interfaces before release. We are
keen to hear feedback from beta-testers like you. Please try these
alternative interfaces and let us know which one you prefer. The main
difference between them is the number of arguments and how the input data
is used:
\itemize{
\item \code{plot_trajectoryA()} requires input arguments such as (at the minimum)
\code{scenario_specs_good_to_bad} and \code{main_line_metric} for specifying the
order and labels of scenario data and trajectory lines.
}

\itemize{
\item \code{plot_trajectoryB()} derives the main and additional lines as well as
scenario order from the data. The lines are plotted according to the order of
the input data. The scenario order is inferred from the order of values on
the last year. For the labels the \code{data} column \code{metric} is used. You may
recode \code{metric} before passing the data with, for example, \code{dplyr::recode()}.
}
}
\examples{
# `plot_trajectoryA()` -------------------------------------------------------
data <- prep_trajectory(
  market_share,
  sector_filter = "power",
  technology_filter = "renewablescap",
  region_filter = "global",
  scenario_source_filter = "demo_2020",
  value = "production"
)

scenario_specs <- dplyr::tibble(
  scenario = c("sds", "sps", "cps"),
  label = c("SDS", "STEPS", "CPS")
)

main_line_metric <- dplyr::tibble(metric = "projected", label = "Portfolio")

additional_line_metrics <- dplyr::tibble(
  metric = "corporate_economy",
  label = "Corporate Economy"
)

p <- plot_trajectoryA(data,
  scenario_specs_good_to_bad = scenario_specs,
  main_line_metric = main_line_metric,
  additional_line_metrics = additional_line_metrics
)

p

# `plot_trajectoryB()` ------------------------------------------------------
library(dplyr)

data <- prep_trajectory(
  market_share,
  sector_filter = "power",
  technology_filter = "renewablescap",
  region_filter = "global",
  scenario_source_filter = "demo_2020",
  value = "production"
)

plot_trajectoryB(data, main_line = "projected")

# You may recode `metric` with `dplyr::recode()`
recoded <- data \%>\%
  mutate(
    metric = recode(
      .data$metric,
      "projected" = "Projected",
      "corporate_economy" = "Corporate Economy",
      "sds" = "SDS",
      "sps" = "SPS",
      "cps" = "CPS"
    )
  )

plot_trajectoryB(recoded, main_line = "Projected")
}
\seealso{
Other plotting functions: 
\code{\link{plot_techmix}()},
\code{\link{plot_timelineA}()},
\code{\link{theme_2dii}()}

Other plotting functions: 
\code{\link{plot_techmix}()},
\code{\link{plot_timelineA}()},
\code{\link{theme_2dii}()}
}
\concept{plotting functions}
